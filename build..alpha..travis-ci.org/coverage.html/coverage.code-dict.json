{"/home/travis/build/npmtest/node-npmtest-css-purge/test.js":"/* istanbul instrument in package npmtest_css_purge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-css-purge/lib.npmtest_css_purge.js":"/* istanbul instrument in package npmtest_css_purge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_css_purge = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_css_purge = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-css-purge/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-css-purge && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_css_purge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_css_purge\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_css_purge.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_css_purge.rollup.js'] =\n            local.assetsDict['/assets.npmtest_css_purge.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_css_purge.__dirname + '/lib.npmtest_css_purge.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-css-purge/node_modules/css-purge/index.js":"\nmodule.exports = require('./lib/css_purge');","/home/travis/build/npmtest/node-npmtest-css-purge/node_modules/css-purge/lib/css-purge.js":"var clc = require('cli-color'),\n\tfs = require('fs'),\n\tparse = require('css-parse'), \n\tread = fs.readFileSync, \n\twrite = fs.writeFileSync;\n\nvar success = clc.greenBright,\n\tsuccess2 = clc.green,\n\terror = clc.red,\n\terror2 = clc.redBright,\n\twarning = clc.yellow,\n\tawesome = clc.magentaBright;\n\nvar filenameIn = '';\nvar filenameOut = '';\n\nvar is_verbose = false,\n\tis_no_duplicate_property = false;\n\nfunction CSSPurge(filenameInput, filenameOutput, options) {\n\n\tfilenameIn = filenameInput;\n\tfilenameOut = filenameOutput;\n\tis_verbose = options.verbose;\n\tis_no_duplicate_property = options.no_duplicate_property;\n\n\ttry {\n\t\tvar css = read(filenameIn, 'utf8');\n\n\t\tvar parsedCSS = parse(css),\n\t\t\tparsedRules = parsedCSS.stylesheet.rules,\n\t\t\tparsedRulesLen = parsedRules.length;\n\n\t\tvar baseDuplicates = [], mediaDuplicates = [], keyFramesDuplicates = [],\n\t\t\tsupportsDuplicates = [];\n\n\t\tvar mediaDuplicatesLen = 0, keyFramesDuplicatesLen = 0, supportsDuplicatesLen = 0;\n\n\t\tvar i = 0;\n\n\t\t// console.log(parsedCSS);\n\t\t// console.log(parsedCSS.stylesheet);\n\t\t// console.log(parsedCSS.stylesheet.rules);\n\t\t// console.log('----');\n\n\t\t///detect duplicates\n\t\t\tif(is_verbose) {\n\t\t\t\tconsole.log('-------------------------');\n\t\t\t\tconsole.log(warning('Detecting base duplicates...'));\n\t\t\t}\n\t\t\tbaseDuplicates = get_duplicates(parsedRules, parsedRules);\n\n\t\t\tfor (i = 0; i < parsedRulesLen; i++) {\n\n\t\t\t\t//@media\n\t\t\t\tif (parsedRules[i].media != undefined) {\n\t\t\t\t\tif(is_verbose) {\n\t\t\t\t\t\tconsole.log('-------------------------');\n\t\t\t\t\t\tconsole.log(warning('Detecting media duplicates...'));\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(parsedRules[i].rules);\n\t\t\t\t\tmediaDuplicates.push([get_duplicates(parsedRules[i].rules, parsedRules[i].rules), i]); //duplicates for the media query and index of media query\n\t\t\t\t}\n\n\t\t\t\t//@keyframes\n\t\t\t\tif (parsedRules[i].name != undefined && parsedRules[i].keyframes != undefined) {\n\t\t\t\t\tif(is_verbose) {\n\t\t\t\t\t\tconsole.log('-------------------------');\n\t\t\t\t\t\tconsole.log(warning('Detecting keyframes duplicates...'));\n\t\t\t\t\t}\n\n\t\t\t\t\t// console.log(parsedRules[i].keyframes);\n\t\t\t\t\tkeyFramesDuplicates.push([get_duplicates(parsedRules[i].keyframes, parsedRules[i].keyframes), i]); //duplicates for the keyframes and index of media query\n\t\t\t\t}\n\n\t\t\t\t//@supports\n\t\t\t\tif (parsedRules[i].supports != undefined) {\n\t\t\t\t\tif(is_verbose) {\n\t\t\t\t\t\tconsole.log('-------------------------');\n\t\t\t\t\t\tconsole.log(warning('Detecting supports duplicates...'));\n\t\t\t\t\t}\n\n\t\t\t\t\t// console.log(parsedRules[i].rules);\t\t\n\t\t\t\t\tsupportsDuplicates.push([get_duplicates(parsedRules[i].rules, parsedRules[i].rules), i]); //duplicates for the supports and index of media query\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// console.log(keyFramesDuplicates);\n\t\t\t// console.log(supportsDuplicates);\n\t\t\t// console.log(mediaDuplicates);\n\t\t///end detect duplicates\n\n\t\t///merge properties\n\t\t\tmediaDuplicatesLen = mediaDuplicates.length,\n\t\t\tkeyFramesDuplicatesLen = keyFramesDuplicates.length\n\t\t\tsupportsDuplicatesLen = supportsDuplicates.length;\n\n\t\t\t//base\n\t\t\tif(is_verbose) {\n\t\t\t\tconsole.log('-------------------------');\n\t\t\t\tconsole.log(warning('Copying base properties...'));\n\t\t\t}\n\t\t\tcopy_properties(parsedRules, baseDuplicates);\n\n\t\t\t//@media\n\t\t\tfor (i = 0; i < mediaDuplicatesLen; i++) {\n\t\t\t\tif(is_verbose) {\n\t\t\t\t\tconsole.log('-------------------------');\n\t\t\t\t\tconsole.log(warning('Copying media properties...'));\n\t\t\t\t}\n\t\t\t\tif (mediaDuplicates[i][0].length > 0) {\n\n\t\t\t\t\t// console.log(mediaDuplicates[i]);\n\t\t\t\t\tcopy_properties(parsedRules[mediaDuplicates[i][1]].rules, mediaDuplicates[i][0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//@keyframes\n\t\t\tfor (i = 0; i < keyFramesDuplicatesLen; i++) {\n\n\t\t\t\tif(is_verbose) {\n\t\t\t\t\tconsole.log('-------------------------');\n\t\t\t\t\tconsole.log(warning('Copying keyframes properties...'));\n\t\t\t\t}\n\t\t\t\tif (keyFramesDuplicates[i][0].length > 0) {\n\n\t\t\t\t\t// console.log(keyFramesDuplicates[i]);\n\t\t\t\t\tcopy_properties(parsedRules[keyFramesDuplicates[i][1]].keyframes, keyFramesDuplicates[i][0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//@supports\n\t\t\tfor (i = 0; i < supportsDuplicatesLen; i++) {\n\n\t\t\t\tif(is_verbose) {\n\t\t\t\t\tconsole.log('-------------------------');\n\t\t\t\t\tconsole.log(warning('Copying supports properties...'));\n\t\t\t\t}\n\t\t\t\tif (supportsDuplicates[i][0].length > 0) {\n\n\t\t\t\t\t// console.log(supportsDuplicates[i]);\n\t\t\t\t\tcopy_properties(parsedRules[supportsDuplicates[i][1]].rules, supportsDuplicates[i][0]);\n\t\t\t\t}\n\t\t\t}\n\t\t///end merge properties\n\n\t\t///remove duplicate rules -- reversed: remove all inner duplicates first to not disturb the main index structure\n\n\t\t\t//@media\n\t\t\tfor (i = 0; i < mediaDuplicatesLen; i++) {\n\t\t\t\tif(is_verbose) {\n\t\t\t\t\tconsole.log('-------------------------');\n\t\t\t\t\tconsole.log(warning('Removing media duplicates...'));\n\t\t\t\t}\n\t\t\t\tif (mediaDuplicates[i][0].length > 0) {\n\n\t\t\t\t\t// console.log(mediaDuplicates[i]);\n\t\t\t\t\t// console.log(parsedRules[mediaDuplicates[i][1]].rules);\n\t\t\t\t\tremove_duplicates(parsedRules[mediaDuplicates[i][1]].rules, mediaDuplicates[i][0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//@keyframes\n\t\t\tfor (i = 0; i < keyFramesDuplicatesLen; i++) {\n\t\t\t\tif(is_verbose) {\n\t\t\t\t\tconsole.log('-------------------------');\n\t\t\t\t\tconsole.log(warning('Removing keyframes duplicates...'));\n\t\t\t\t}\n\t\t\t\tif (keyFramesDuplicates[i][0].length > 0) {\n\n\t\t\t\t\t// console.log(keyFramesDuplicates[i]);\n\t\t\t\t\tremove_duplicates(parsedRules[keyFramesDuplicates[i][1]].keyframes, keyFramesDuplicates[i][0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//@supports\n\t\t\tfor (i = 0; i < supportsDuplicatesLen; i++) {\n\t\t\t\tif(is_verbose) {\n\t\t\t\t\tconsole.log('-------------------------');\n\t\t\t\t\tconsole.log(warning('Removing supports duplicates...'));\n\t\t\t\t}\n\t\t\t\tif (supportsDuplicates[i][0].length > 0) {\n\n\t\t\t\t\t// console.log(supportsDuplicates[i]);\n\t\t\t\t\tremove_duplicates(parsedRules[supportsDuplicates[i][1]].rules, supportsDuplicates[i][0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//base\n\t\t\tif(is_verbose) {\n\t\t\t\tconsole.log('-------------------------');\n\t\t\t\tconsole.log(warning('Removing base duplicates...'));\n\t\t\t}\n\t\t\tremove_duplicates(parsedRules, baseDuplicates);\n\n\t\t///end remove duplicate rules\n\n\t\toutput_css(parsedRules);\n\n\n\t} catch (e) {\n\n\t\tconsole.log(error('\\nDarn it, something went wrong: \\n\\n') + error2(e.stack) + '\\n');\n\t}\n}\n\nfunction output_css(rules) {\n\n\tvar outputCSS = '';\n\n\tif(is_verbose) {\n\t\tconsole.log('-------------------------');\n\t\tconsole.log(warning('Writing file...'));\n\t}\n\n\t// console.log(filenameOut);\n\n\trules.forEach(function(rule){\n\t\t\n\t\t//@charset\n\t\tif (rule.charset != undefined) {\n\n\t\t\t// console.log(rule.charset);\n\t\t\toutputCSS += '@charset ' + rule.charset + ';\\n';\n\t\t}\n\n\t\t//@import\n\t\tif (rule.import != undefined) {\n\n\t\t\toutputCSS += '@import ' + rule.import + ';\\n';\n\t\t}\n\n\t\t//@keyframes\n\t\tif (rule.name != undefined && rule.keyframes != undefined) {\n\n\t\t\t// console.log(rule);\n\t\t\toutputCSS += '\\n@keyframes ' + rule.name + ' {\\n';\n\n\t\t\trule.keyframes.forEach(function(rule){\n\n\t\t\t\t// console.log(rule);\n\t\t\t\toutputCSS += _get_rule(rule, 1);\n\t\t\t});\n\n\t\t\toutputCSS += '}\\n';\n\t\t}\n\n\t\t//@supports\n\t\tif (rule.supports != undefined) {\n\n\t\t\toutputCSS += '\\n@supports ' + rule.supports + ' {\\n\\n';\n\n\t\t\trule.rules.forEach(function(rule){\n\n\t\t\t\t// console.log(rule);\n\t\t\t\toutputCSS += _get_rule(rule, 1);\n\t\t\t});\n\n\t\t\toutputCSS += '}\\n';\n\t\t}\n\n\t\t//@media\n\t\tif (rule.media != undefined) {\n\n\t\t\t// console.log(rule.media);\n\t\t\t// console.log(rule.rules);\n\n\t\t\toutputCSS += '\\n@media ' + rule.media + ' {\\n\\n';\n\n\n\t\t\trule.rules.forEach(function(rule){\n\n\t\t\t\toutputCSS += _get_rule(rule, 1);\n\t\t\t});\n\n\t\t\toutputCSS += '}\\n';\n\t\t}\n\n\t\t//handle normal selectors\n\t\toutputCSS += _get_rule(rule);\n\t});\n\n\n\twrite(filenameOut, outputCSS);\n\n\tconsole.log('\\n' + new Date() + ' ' + awesome('Success! ') + success2(filenameIn) + ' : ' + success(filenameOut) + '');\n}\n\n\nfunction _get_rule(rule, no_indents) {\n\n\toutputCSS = '';\n\n\tfor (i = 0; i < no_indents; i++) {\n\t\toutputCSS += '\\t';\n\t}\n\n\t//@page\n\tif (rule.type != undefined) {\n\n\t\tswitch(rule.type) {\n\n\t\t\tcase 'page': outputCSS += '@page ';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rule.selectors != undefined) {\n\t\toutputCSS += '' + rule.selectors + ' {';\n\t} else if (rule.values != undefined) {\n\t\toutputCSS += '' + rule.values + ' {';\n\t}\n\t\n\tif (rule.declarations != undefined) {\n\t\t// console.log(rule.declarations);\n\t\trule.declarations.forEach(function(declaration){\n\n\t\t\toutputCSS += '\\n';\n\n\t\t\tfor (i = 0; i < no_indents; i++) {\n\t\t\t\toutputCSS += '\\t';\n\t\t\t}\n\t\t\t// console.log(declaration);\n\t\t \toutputCSS += '\\t' + declaration.property + ': ' + declaration.value + ';';\n\t\n\t\t});\n\t}\n\n\toutputCSS += '\\n';\n\n\tfor (i = 0; i < no_indents; i++) {\n\t\toutputCSS += '\\t';\n\t}\n\n\tif (rule.selectors != undefined || rule.values != undefined) {\n\t\toutputCSS += '}\\n';\n\t}\n\n\treturn outputCSS;\n}\n\n\n\n\nfunction get_duplicates(fRules, oRules) { //fRules - Final Rules, oRules = Original Rules\n\n\t//the list of rules to ignore checking for duplication, duh.\n\tvar ignoreRulesList = ['@font-face'],\n\t\truleToIgnoreFound = false;\n\t\n\t// console.log(fRules);\n\t// console.log('----------------------------');\n\t// console.log(oRules);\n\n\tvar fRulesLen = fRules.length,\n\t\toRulesLen = oRules.length;\n\n\tvar i = 0, j = 0, k = 0, \n\t\tl = 0, m = 0, peetsake = 0;\n\n\tvar rulesToChange = [],\n\t\truleTo, \n\t\truleFrom;\n\n\tvar isRescan = false;\n\n\tfor (i = 0; i < fRulesLen; i++) {\n\n\t\tif ((fRules[i].selectors !== undefined || fRules[i].values !== undefined) && fRules[i].declarations !== undefined \n\t\t\t&& fRules[i].type === undefined) {\n\t\t\t\n\t\t\tif (fRules[i].selectors !== undefined)\n\t\t\t\tselectorsTo = '' + fRules[i].selectors;\n\t\t\telse if (fRules[i].values !== undefined)\n\t\t\t\tselectorsTo = '' + fRules[i].values;\n\n\t\t\tfor (m = 0; m < rulesToChange.length; m++) {\n\n\t\t\t\tif (fRules[i].selectors !== undefined) {\n\t\t\t\t\tif (rulesToChange[m][0].selectors + '' == selectorsTo) {\n\n\t\t\t\t\t\tisRescan = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (fRules[i].values !== undefined) {\n\t\t\t\t\tif (rulesToChange[m][0].values + '' == selectorsTo) {\n\n\t\t\t\t\t\tisRescan = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isRescan) {\n\n\t\t\t\tfor (j = 0; j < oRulesLen; j++) {\n\n\t\t\t\t\tif ((oRules[j].selectors !== undefined || oRules[j].values !== undefined) && oRules[j].declarations !== undefined \n\t\t\t\t\t\t&& oRules[j].type === undefined) {\n\n\t\t\t\t\t\tif (oRules[j].selectors !== undefined)\n\t\t\t\t\t\t\tselectorsFrom = '' + oRules[j].selectors;\n\t\t\t\t\t\telse if (oRules[j].values !== undefined)\n\t\t\t\t\t\t\tselectorsFrom = '' + oRules[j].values;\n\n\n\t\t\t\t\t\tif (is_verbose) {\n\t\t\t\t\t\t\tconsole.log('Comparing [' + i + ']' + selectorsTo + ' ' + '[' + j + ']' + selectorsFrom);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\n\t\t\t\t\t\tfor (k = 0; k < rulesToChange.length; k++) {\n\n\t\t\t\t\t\t\tfor (l = 0; l < rulesToChange[k][1].length; l++) {\n\n\t\t\t\t\t\t\t\tif (oRules[j].selectors !== undefined) {\n\t\t\t\t\t\t\t\t\tif (selectorsFrom == rulesToChange[k][1].selectors + '') {\n\n\t\t\t\t\t\t\t\t\t\tisRescan = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (oRules[j].values !== undefined) {\n\t\t\t\t\t\t\t\t\tif (selectorsFrom == rulesToChange[k][1].values + '') {\n\n\t\t\t\t\t\t\t\t\t\tisRescan = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!isRescan) {\n\n\t\t\t\t\t\t\truleToIgnoreFound = false;\n\t\t\t\t\t\t\tfor (peetsake = 0; peetsake < ignoreRulesList.length; peetsake++) {\n\n\t\t\t\t\t\t\t\tif (selectorsTo == ignoreRulesList[peetsake] || selectorsFrom == ignoreRulesList[peetsake]) {\n\t\t\t\t\t\t\t\t\truleToIgnoreFound = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (selectorsTo == selectorsFrom && i != j && !ruleToIgnoreFound) {\n\n\t\t\t\t\t\t\t\tif (is_verbose) {\n\t\t\t\t\t\t\t\t\tconsole.log('! Comparing [' + i + ']' + selectorsTo + ' ' + '[' + j + ']' + selectorsFrom);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\truleToIndex = i;\n\t\t\t\t\t\t\t\truleFromIndex = j;\n\t\t\t\t\t\t\t\truleTo = fRules[i];\n\t\t\t\t\t\t\t\truleFrom = oRules[j];\n\n\t\t\t\t\t\t\t\trulesToChange.push([ruleTo, ruleFrom, ruleToIndex, ruleFromIndex]);\n\n\t\t\t\t\t\t\t\tif (is_verbose) {\n\n\t\t\t\t\t\t\t\t\tif (oRules[j].selectors !== undefined) {\n\t\t\t\t\t\t\t\t\t\tconsole.log('CopyTo: [' + i + ']' + ruleTo.selectors);\n\t\t\t\t\t\t\t\t\t\tconsole.log('Duplicate: [' + j + ']' + ruleFrom.selectors);\n\t\t\t\t\t\t\t\t\t\tconsole.log('RuleTo: ');\n\t\t\t\t\t\t\t\t\t\tconsole.log(ruleTo);\n\t\t\t\t\t\t\t\t\t\tconsole.log('RuleFrom: ');\n\t\t\t\t\t\t\t\t\t\tconsole.log(ruleFrom);\n\t\t\t\t\t\t\t\t\t} else if (oRules[j].values !== undefined) {\n\t\t\t\t\t\t\t\t\t\tconsole.log('CopyTo: [' + i + ']' + ruleTo.values);\n\t\t\t\t\t\t\t\t\t\tconsole.log('Duplicate: [' + j + ']' + ruleFrom.values);\n\t\t\t\t\t\t\t\t\t\tconsole.log('RuleTo: ');\n\t\t\t\t\t\t\t\t\t\tconsole.log(ruleTo);\n\t\t\t\t\t\t\t\t\t\tconsole.log('RuleFrom: ');\n\t\t\t\t\t\t\t\t\t\tconsole.log(ruleFrom);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tisRescan = false;\t\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} //end for\n\n\t\t\t} else {\n\n\t\t\t\tisRescan = false;\n\t\t\t}\n\n\t\t} // end of if (undefined)\n\t}\n\n\treturn rulesToChange;\n}\n\n\n\n\nfunction copy_properties(rules, rulesToChange) {\n\t\n\n\tvar isDuplicateProperty = false,\n\t\tpropertiesToCheck = [],\n\t\tduplicatePropertiesIndexes = [],\n\t\tnewProperties = [];\n\n\n\tfor (i = 0; i < rules.length; i++) {\n\n\t\tfor (j = 0; j < rulesToChange.length; j++) {\n\n\t\t\tif (rulesToChange[j][2] == i) {\n\n\t\t\t\t// console.log(rules[i]);\n\t\t\t\t// console.log(rulesToChange[j][1]);\n\n\t\t\t\tif (rulesToChange[j][1].declarations != undefined) {\n\n\n\t\t\t\t\t//check rules for duplicate properties\n\t\t\t\t\tvar arr = {};\n\n\t\t\t\t\tfor ( var l=0; l < rules[i].declarations.length; l++ )\n\t\t\t\t\t    arr[rules[i].declarations[l]['property']] = rules[i].declarations[l];\n\n\t\t\t\t\trules[i].declarations = new Array();\n\t\t\t\t\tfor ( key in arr )\n\t\t\t\t\t    rules[i].declarations.push(arr[key]);\n\t\t\t\t\t// console.log(rules[i].declarations)\n\n\n\n\t\t\t\t\t//check rules to change with for duplicate properties\n\t\t\t\t\tarr = {};\n\n\t\t\t\t\tfor ( var l=0; l < rulesToChange[j][1].declarations.length; l++ )\n\t\t\t\t\t    arr[rulesToChange[j][1].declarations[l]['property']] = rulesToChange[j][1].declarations[l];\n\n\t\t\t\t\trulesToChange[j][1].declarations = new Array();\n\t\t\t\t\tfor ( key in arr )\n\t\t\t\t\t    rulesToChange[j][1].declarations.push(arr[key]);\n\t\t\t\t\t// console.log(rulesToChange[j][1]);\n\n\n\n\t\t\t\t\t//the copy\n\t\t\t\t\tfor (k = 0; k < rulesToChange[j][1].declarations.length; k++) {\n\n\t\t\t\t\t\t//check for duplicate\t\t\t\n\t\t\t\t\t\tfor (l = 0; l < rules[i].declarations.length; l++) {\n\n\t\t\t\t\t\t\tif (rules[i].declarations[l].property + '' == rulesToChange[j][1].declarations[k].property + '') {\n\n\t\t\t\t\t\t\t\tif (is_no_duplicate_property) {\n\t\t\t\t\t\t\t\t\tisDuplicateProperty = true;\n\n\t\t\t\t\t\t\t\t\tif(is_verbose) {\n\t\t\t\t\t\t\t\t\t\tconsole.log('[' + i + ']B ' + rules[i].declarations[l].property + ' : ' +  rules[i].declarations[l].value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\trules[i].declarations[l].value = rulesToChange[j][1].declarations[k].value;\n\n\t\t\t\t\t\t\t\t\tif(is_verbose) {\n\t\t\t\t\t\t\t\t\t\tconsole.log('[' + i + ']A ' + rules[i].declarations[l].property + ' : ' +  rules[i].declarations[l].value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif(is_verbose) {\n\t\t\t\t\t\t\t\t\tconsole.log('[' + i + '] ' + rules[i].declarations[l].property + ' : ' +  rules[i].declarations[l].value);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!isDuplicateProperty) {\n\n\t\t\t\t\t\t\trules[i].declarations.push({\n\n\t\t\t\t\t\t\t\tproperty: rulesToChange[j][1].declarations[k].property,\n\t\t\t\t\t\t\t\tvalue: rulesToChange[j][1].declarations[k].value\n\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tisDuplicateProperty = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} //end of for\n\t\t\t\t}\n\n\t\t\t\t// console.log('----');\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nfunction remove_duplicates(rules, rulesToChange) {\n\t\t\n\t//remove duplicates from the back to the front (to avoid index changes)\n\tfor (i = rules.length; i > 0; i--) {\n\n\t\tfor (j = 0; j < rulesToChange.length; j++) {\n\n\t\t\tif (rulesToChange[j][3] == i) {\n\n\t\t\t\tif(is_verbose) {\n\n\t\t\t\t\tconsole.log('[' + i + '] ');\n\t\t\t\t\tconsole.log(rules[i]);\n\t\t\t\t}\n\n\t\t        rules.splice(i, 1);\n\t\t    }\n\t\t}\n\n\t}\n}\n\n\nmodule.exports = CSSPurge;"}